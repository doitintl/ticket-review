CREATE MODEL IF NOT EXISTS `${vertex_model_dataset_id}.palm-bison-32k`
  REMOTE WITH CONNECTION `${multi_region}.${connection_id}`
  OPTIONS (ENDPOINT = 'text-bison-32k@002');

INSERT `${project}.${sampled_data_dataset_id}.${sampled_data_table_id}`
WITH _base AS (
    SELECT
        tc.* EXCEPT (id),
        t.*,
        CASE
            WHEN
                REGEXP_CONTAINS(u.email, '(?i)doit.com')
                THEN 'internal'
            ELSE 'external'
        END AS user_type
    FROM `doit-zendesk-analysis.zendesk.ticket` AS t
    INNER JOIN `doit-zendesk-analysis.zendesk.ticket_comment` AS tc
        ON t.id = tc.ticket_id
    INNER JOIN `doit-zendesk-analysis.zendesk.user` AS u
        ON tc.user_id = u.id
    WHERE
        1 = 1
        AND tc.user_id != 12741275940764    # exclude ZR comments
        AND tc.user_id != 10480587018012    # exclude Zippy comments
        AND tc.user_id != 1824442126        # exclude urgent ticket warnings
        AND custom_platform IS NOT NULL     # exclude finance tickets
        AND custom_product IS NOT NULL      # exclude follow-up-tickets
        AND subject NOT LIKE ('%[gCRE]%')
        # exlude all other GetDoer requests such as Onboarding / ..
        AND system_client != 'GetDoer/ZendeskClient'
        AND custom_platform IN (
            'amazon_web_services', 'google_g_suite', 'google_cloud_platform'
        )
        AND t.created_at BETWEEN TIMESTAMP_SUB(@run_time, INTERVAL 24 HOUR) AND @run_time
        AND t.status IN ('solved', 'closed')
),

prep_comments AS (
    SELECT
        id,
        STRING_AGG(body, '\n[NEW-MESSAGE]\n' ORDER BY created) AS history
    FROM _base
    GROUP BY id
),

create_anonymised_history AS (
    SELECT
        id,
        SPLIT(LTRIM(ml_generate_text_llm_result, ' START:'), '[NEW-MESSAGE]') AS anonymised_history
    FROM
        ML.GENERATE_TEXT(
            model `vertex_models.palm-bison-32k`,
            (
                SELECT
                    id,
                    CONCAT(
                        '''The START: string will mark a beginning of a conversation between a customer 
                        (can be more than one) and DoiT engineer (also can be more than one). 
                        Please anonymise this conversation using names from The Simpsons. 
                        Output should consist of just the anonymised conversation, without any other changes.
                        START:''',
                        history
                    ) AS prompt
                FROM prep_comments
            ),
            STRUCT(
                0.1 AS temperature,
                8192 AS max_output_tokens,
                0.1 AS top_p,
                TRUE AS flatten_json_output
            )
        )
),

unnested_anonymised_history AS (
    SELECT
        id,
        anonymised_body,
        offset
    FROM create_anonymised_history,
        UNNEST(anonymised_history) AS anonymised_body
        WITH OFFSET AS offset
),

ranked_base AS (
    SELECT
        _base.*,
        ROW_NUMBER() OVER (PARTITION BY id ORDER BY created) - 1 AS rn
    FROM _base
),

joined_anonymised_history AS (
    SELECT
        ranked_base.*,
        unnested_anonymised_history.anonymised_body
    FROM ranked_base
    LEFT JOIN unnested_anonymised_history
        ON ranked_base.id = unnested_anonymised_history.id
            AND ranked_base.rn = unnested_anonymised_history.offset
),

time_to_reply AS (
    SELECT
        *,
        TIMESTAMP_DIFF(
            created,
            LEAD(created) OVER (PARTITION BY id ORDER BY created DESC),
            MINUTE
        ) AS time_to_reply
    FROM joined_anonymised_history
    ORDER BY created_at DESC
),

tags AS (
    SELECT
        ticket_id AS t,
        ARRAY_AGG(tag) AS taggs
    FROM doit-zendesk-analysis.zendesk.ticket_tag
    GROUP BY t
),

escalated_tickets AS (
    SELECT
        t,
        taggs AS escalation
    FROM tags AS t0, t0.taggs
    WHERE taggs = 'ticket_escalated'
),

badcsat_tickets AS (
    SELECT
        t,
        taggs AS csat
    FROM tags AS t0, t0.taggs
    WHERE taggs = 'bad_satisfaction_notice'
),

final_tags AS (
    SELECT
        t.t AS ticket_id,
        COALESCE(te.escalation, 'false') AS escalation,
        COALESCE(tb.csat, 'none') AS csat
    FROM tags AS t
    FULL OUTER JOIN escalated_tickets AS te
        ON t.t = te.t
    FULL OUTER JOIN badcsat_tickets AS tb
        ON t.t = tb.t
),

_calc AS (
    SELECT
        t.*,
        id,
        created_at AS ticket_creation_ts,
        assignee_id,
        subject,
        priority,
        status,
        custom_product,
        NULL AS frt, #FIXME
        CASE custom_platform
            WHEN 'amazon_web_services' THEN 'AWS' WHEN
                'google_cloud_platform'
                THEN 'GCP'
            ELSE 'OTHER'
        END AS custom_platform,
        ARRAY_AGG(
            STRUCT(created, user_id, body, anonymised_body, user_type, time_to_reply, public) ORDER BY created ASC
        ) AS comment,
        MAX(updated_at) AS lastupdate_at #FIXME
    FROM time_to_reply AS ttr
    INNER JOIN final_tags AS t
        ON ttr.id = t.ticket_id
    GROUP BY ALL
),

fa AS (

SELECT c.*, m.p_group, m.focus_area
FROM _calc c
INNER JOIN doit-zendesk-analysis.practice_areas_analysis.product_to_focus_area m
ON c.custom_product = m.product

), 

final AS (

    SELECT *, "philipp@doit.com" as assigned_reviewer  FROM fa
)

SELECT * FROM final;
